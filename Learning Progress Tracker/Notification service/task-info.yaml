type: edu
files:
- name: src/tracker/Main.java
  visible: true
  text: |
    package tracker;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, World!");
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.1'
    }

    test {
        useJUnitPlatform()
    }
  learner_created: false
- name: test/tracker/SampleTest.java
  visible: true
  text: |
    package tracker;

    import org.junit.jupiter.api.Test;

    import static org.junit.jupiter.api.Assertions.*;

    public class SampleTest {

        @Test
        void test() {
            assertEquals(5, 2 + 3);
        }
    }
  learner_created: false
- name: test/LearningProgressTrackerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.Collections;
    import java.util.HashSet;
    import java.util.List;
    import java.util.Random;
    import java.util.Set;
    import java.util.function.Predicate;
    import java.util.stream.Collectors;
    import java.util.stream.IntStream;
    import java.util.stream.Stream;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class LearningProgressTrackerTest extends StageTest<String> {
        private static final Random rnd = new Random();

        @DynamicTest(order = 1)
        CheckResult testStartAndExit() {
            TestedProgram main = new TestedProgram();
            String output = main.start();
            expect(output).toContain(1).lines();
            if (incorrectString(output, "Learning Progress Tracker")) {
                return CheckResult.wrong("When started, your program " +
                        "should print \"Learning Progress Tracker\"");
            }

            if (!main.isWaitingInput()) {
                return CheckResult.wrong("After the start, your program should " +
                        "be ready to accept commands from the user");
            }

            output = main.execute("back");
            expect(output).toContain(1).lines();
            if (!main.isWaitingInput()) {
                return CheckResult.wrong("Your program should keep running after the 'back' " +
                        "command is entered");
            }

            if (anyMissingKeywords(output, "enter", "exit", "program")) {
                return CheckResult.wrong("When 'back' command is entered your program " +
                        "should print the hint \"Enter 'exit' to exit the program.\"");
            }

            output = main.execute("exit");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "bye")) {
                return CheckResult.wrong("When the 'exit' command is entered, " +
                        "your program should say bye to the user");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("After the 'exit' command has been entered, " +
                        "your program should stop working");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2, data = "getBlankInput")
        CheckResult testBlankInput(String input) {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute(input);
            expect(output).toContain(1).lines();
            if (incorrectString(output, "no input")) {
                return CheckResult.wrong("When the user enters an empty or blank " +
                        "string, your program should print \"No input.\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3, data = "getUnknownCommands")
        CheckResult testUnknownCommands(String input) {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute(input);
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "unknown", "command")) {
                return CheckResult.wrong("When an unknown command is entered, your " +
                        "program should display an error message: \"Unknown command!\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 4)
        CheckResult testAddStudents1() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute("add students");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output,
                    "enter", "student", "credentials", "back", "return")) {
                return CheckResult.wrong("When 'add students' command is entered, your " +
                        "program should display the prompt \"Enter student credentials or " +
                        "'back' to return:\"");
            }

            output = main.execute("exit");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "incorrect", "credentials")) {
                return CheckResult.wrong("Expected output: \"Incorrect credentials.\", " +
                        "but your output was: " + output);
            }

            output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "total", "0", "students", "added")) {
                return CheckResult.wrong("Expected: \"Total 0 students have been added.\", but " +
                        "your output was: " + output);
            }

            output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "enter", "exit", "program")) {
                return CheckResult.wrong("When 'back' command is entered your program " +
                        "should stop waiting for student credentials");
            }

            output = main.execute("exit");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "bye")) {
                return CheckResult.wrong("When the 'exit' command is entered, " +
                        "your program should say bye to the user");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("After the 'exit' command has been entered, " +
                        "your program should stop working");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult testAddStudents2() {
            TestedProgram main = new TestedProgram();
            main.start();

            main.execute("add students");
            for (String input : getCorrectCredentials()) {
                String output = main.execute(input);
                expect(output).toContain(1).lines();
                if (anyMissingKeywords(output, "student", "added")) {
                    return CheckResult.wrong("Expected output: \"The student has been added.\", but your " +
                            "output was: " + output);
                }
            }

            String output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "total", "10", "students", "added")) {
                return CheckResult.wrong("Expected: \"Total 10 students have been added.\", but " +
                        "your output was: " + output);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult testAddStudents3() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            for (String[] args : getIncorrectCredentials()) {
                String output = main.execute(args[0]);
                expect(output).toContain(1).lines();
                if (incorrectString(output, args[1])) {
                    return CheckResult.wrong("Expected output: \"" + args[1] + "\", but your " +
                            "output was: " + output);
                }
            }

            String output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "total", "0", "students", "added")) {
                return CheckResult.wrong("Expected: \"Total 0 students have been added.\", but " +
                        "your output was: " + output);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 7)
        CheckResult testFindAll1() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");
            main.execute("back");

            String output = main.execute("list");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "no", "found")) {
                return CheckResult.wrong("Expected: \"No students found.\", but " +
                        "your output was: " + output);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 8)
        CheckResult testAddDoubles() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            List<String> credentials = getRandomCredentials(12);
            for (String arg : credentials) {
                String output = main.execute(arg);
                expect(output).toContain(1).lines();
                if (anyMissingKeywords(output, "student", "added")) {
                    return CheckResult.wrong("Expected output: \"The student has been added.\", but your " +
                            "output was: " + output);
                }

                output = main.execute(arg);
                expect(output).toContain(1).lines();
                if (anyMissingKeywords(output, "this", "email", "already", "taken")) {
                    return CheckResult.wrong("Expected output: \"This email is already taken.\", but your " +
                            "output was: " + output);
                }
            }

            String output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "total", String.valueOf(credentials.size()), "students", "added")) {
                return CheckResult.wrong("Expected: \"Total " + credentials.size() + "students have been added.\", but " +
                        "your output was: " + output);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 9)
        CheckResult testFindAll2() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            List<String> credentials = getRandomCredentials(12);
            for (String arg : credentials) {
                String output = main.execute(arg);
                expect(output).toContain(1).lines();
                if (anyMissingKeywords(output, "student", "added")) {
                    main.stop();
                    return CheckResult.wrong("Expected output: \"The student has been added.\", but your " +
                            "output was: " + output);
                }
            }

            String output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "total", String.valueOf(credentials.size()), "students", "added")) {
                return CheckResult.wrong("Expected: \"Total " + credentials.size() + "students have been added.\", but " +
                        "your output was: " + output);
            }

            output = main.execute("list");
            List<String> lines = expect(output).toContain(credentials.size() + 1).lines();
            if (!lines.get(0).toLowerCase().contains("students")) {
                return CheckResult.wrong("Expected the header \"Students:\" but your first line was: " + lines.get(0));
            }

            List<String> ids = parseIds(lines);
            Set<String> uniqueIds = new HashSet<>(ids);
            if (uniqueIds.size() != ids.size()) {
                return CheckResult.wrong("Expected " + ids.size() +
                        " unique IDs but found only " + uniqueIds.size());
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult testBackFromAddPoints() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute("add points");
            expect(output).toContain().lines();
            if (anyMissingKeywords(output, "enter", "id", "points", "back", "return")) {
                return CheckResult.wrong("When 'add points' command is entered, your program should print " +
                        "\"Enter an id and points or 'back' to return:\" but your output was: " + output);
            }

            main.execute("back");
            output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "enter", "exit", "program")) {
                return CheckResult.wrong("When 'back' command is entered your program " +
                        "should stop waiting for student id and points");
            }

            output = main.execute("exit");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "bye")) {
                return CheckResult.wrong("When the 'exit' command is entered, " +
                        "your program should say bye to the user");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("After the 'exit' command has been entered, " +
                        "your program should stop working");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 11)
        CheckResult testStudentPoints1() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            List<String> credentials = getRandomCredentials(6);
            for (String arg : credentials) {
                main.execute(arg);
            }

            main.execute("back");
            String output = main.execute("list");
            List<String> lines = expect(output).toContain().lines();
            List<String> ids = parseIds(lines);

            main.execute("add points");
            String[] points = getIncorrectPoints();
            for (String point : points) {
                output = main.execute(ids.get(0) + " " + point);
                expect(output).toContain().lines();
                if (anyMissingKeywords(output, "incorrect", "format")) {
                    return CheckResult.wrong("Expected output: \"Incorrect points format.\", but your output was: " + output);
                }
            }

            output = main.execute("imsurethereisnosuchstudentid 1 1 1 1");
            expect(output).toContain().lines();
            if (anyMissingKeywords(output, "no", "student", "found") ||
                    !output.contains("imsurethereisnosuchstudentid")) {
                return CheckResult.wrong("Expected output was: \"No student is found " +
                        "for id=imsurethereisnosuchstudentid.\" but your output was: " + output);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 12)
        CheckResult testStudentPoints2() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            List<String> credentials = getRandomCredentials(6);
            for (String arg : credentials) {
                main.execute(arg);
            }
            main.execute("back");

            String output = main.execute("list");
            List<String> lines = expect(output).toContain().lines();
            List<String> ids = parseIds(lines);

            main.execute("add points");
            String[] points = getCorrectPoints(6);

            for (int i = 0; i < points.length; i++) {
                output = main.execute(ids.get(i) + " " + points[i]);
                expect(output).toContain(1).lines();
                if (anyMissingKeywords(output, "points", "updated")) {
                    return CheckResult.wrong("Expected \"Points updated.\" but your output was " + output);
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 13)
        CheckResult testBackFromFind() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute("find");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "enter", "id", "back", "return")) {
                return CheckResult.wrong("When 'find' command is entered, you program should " +
                        "print \"Enter an id or 'back' to return:\", but your output was: " + output);
            }

            main.execute("back");
            output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "enter", "exit", "program")) {
                return CheckResult.wrong("When 'back' command is entered your program " +
                        "should stop waiting for student id");
            }

            output = main.execute("exit");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "bye")) {
                return CheckResult.wrong("When the 'exit' command is entered, " +
                        "your program should say bye to the user");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("After the 'exit' command has been entered, " +
                        "your program should stop working");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 14)
        CheckResult testFindByID() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            List<String> credentials = getRandomCredentials(5);
            for (String arg : credentials) {
                main.execute(arg);
            }
            main.execute("back");

            String output = main.execute("list");
            List<String> lines = expect(output).toContain().lines();
            List<String> ids = parseIds(lines);

            main.execute("add points");
            for (int i = 0; i < ids.size(); i++) {
                main.execute(String.format("%s %d %d %d %d", ids.get(i), i, i, i, i));
                main.execute(String.format("%s %d %d %d %d", ids.get(i), i, i, i, i));
            }

            main.execute("back");
            output = main.execute("find");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "enter", "id", "back", "return")) {
                return CheckResult.wrong("When 'find' command is entered, you program should " +
                        "print \"Enter an id or 'back' to return:\", but your output was: " + output);
            }

            for (int i = 0; i < ids.size(); i++) {
                output = main.execute(ids.get(i));
                expect(output).toContain(1).lines();
                String expected = String.format(
                        "%s points: Java=%d; DSA=%d; Databases=%d; Spring=%d",
                        ids.get(i), i * 2, i * 2, i * 2, i * 2
                );
                if (incorrectString(output, expected)) {
                    return CheckResult.wrong("Expected output: " + expected +
                            ", but your output was: " + output);
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 15)
        CheckResult testBackFromStatistics() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute("statistics");
            main.execute("back");
            output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "enter", "exit", "program")) {
                return CheckResult.wrong("When 'back' command is entered your program " +
                        "should stop waiting for student id");
            }

            output = main.execute("exit");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "bye")) {
                return CheckResult.wrong("When the 'exit' command is entered, " +
                        "your program should say bye to the user");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("After the 'exit' command has been entered, " +
                        "your program should stop working");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 16)
        CheckResult testStatistics1() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute("statistics");
            String[] lines = Arrays.stream(output.split("\n"))
                    .filter(Predicate.not(String::isBlank))
                    .toArray(String[]::new);

            if (anyMissingKeywords(lines[0], "course", "details", "back", "quit")) {
                return CheckResult.wrong("When the \"statistics\" command is entered, your " +
                        "program must print: \"Type the name of a course to see details or 'back' " +
                        "to quit:\", but your output was: " + lines[0]);
            }

            if (lines.length < 7) {
                return CheckResult.wrong("Your program should print a header and 6 " +
                        "categories, but you printed only " + lines.length + " lines");
            }

            List<String> categories = List.of("Most popular: n/a", "Least popular: n/a",
                    "Highest activity: n/a", "Lowest activity: n/a", "Easiest course: n/a",
                    "Hardest course: n/a");
            for (int i = 1; i < lines.length; i++) {
                if (incorrectString(lines[i], categories.get(i - 1))) {
                    return CheckResult.wrong("Expected: " + categories.get(i - 1) +
                            ", but your output was " + lines[i]);
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 17)
        CheckResult testStatistics2() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("statistics");

            List<String> courses = List.of("Java", "DSA", "Databases", "Spring");
            for (String course : courses) {
                String output = main.execute(course);
                String[] lines = output.split("\n");
                if (lines.length < 2) {
                    return CheckResult.wrong("Expected 2 lines, but your output was only " + lines.length + " lines.");
                }

                if (incorrectString(lines[0], course.toLowerCase())) {
                    return CheckResult.wrong("Your first line should be " + course + ", but your output was " + lines[0]);
                }

                if (anyMissingKeywords(lines[1], "id", "points", "completed")) {
                    return CheckResult.wrong("Your second line should be \"id\tpoints\tcompleted\", " +
                            "but your output was " + lines[1]);
                }
            }

            List<String> unknown = Arrays.stream(getUnknownCommands())
                    .filter(str -> courses.stream().noneMatch(it -> it.trim().equalsIgnoreCase(str)))
                    .collect(Collectors.toList());

            for (String course : unknown) {
                String output = main.execute(course);
                if (incorrectString(output, "unknown course")) {
                    return CheckResult.wrong("Expected output: \"Unknown course.\", but your output was: " + output);
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 18)
        CheckResult testStatistics3() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("statistics");

            main.execute("back");
            if (!main.isWaitingInput()) {
                return CheckResult.wrong("Your program should keep running after the 'back' " +
                        "command is entered");
            }

            String output = main.execute("back");
            if (anyMissingKeywords(output, "enter", "exit", "program")) {
                return CheckResult.wrong("When 'back' command is entered your program " +
                        "should print the hint \"Enter 'exit' to exit the program.\"");
            }

            output = main.execute("exit");
            if (anyMissingKeywords(output, "bye")) {
                return CheckResult.wrong("When the 'exit' command is entered, " +
                        "your program should say bye to the user");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("After the 'exit' command has been entered, " +
                        "your program should stop working");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 19)
        CheckResult testCategories1() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            getRandomCredentials(4).forEach(main::execute);

            main.execute("back");
            String output = main.execute("list");
            List<String> lines = expect(output).toContain().lines();
            List<String> ids = parseIds(lines);

            main.execute("add points");
            for (String id : ids) {
                main.execute(String.format("%s 5 4 3 1", id));
            }

            main.execute("back");
            lines = expect(main.execute("statistics")).toContain().lines();

            if (anyMissingKeywords(lines.get(1), "java", "dsa", "databases", "spring")) {
                return CheckResult.wrong("Expected most popular: Java, DSA, Databases, Spring, " +
                        "but your output was: " + lines.get(1));
            }

            if (!lines.get(2).toLowerCase().contains("n/a")) {
                return CheckResult.wrong("Expected least popular: n/a, " +
                        "but your output was: " + lines.get(2));
            }

            if (anyMissingKeywords(lines.get(3), "java", "dsa", "databases", "spring")) {
                return CheckResult.wrong("Expected top activity: Java, DSA, Databases, Spring, " +
                        "but your output was: " + lines.get(3));
            }

            if (!lines.get(4).contains("n/a")) {
                return CheckResult.wrong("Expected lowest activity: n/a, " +
                        "but your output was: " + lines.get(4));
            }

            if (anyMissingKeywords(lines.get(5), "java")) {
                return CheckResult.wrong("Expected easiest course: Java, " +
                        "but your output was: " + lines.get(5));
            }

            if (anyMissingKeywords(lines.get(6), "Spring")) {
                return CheckResult.wrong("Expected hardest course: Spring, " +
                        "but your output was: " + lines.get(6));
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 20)
        CheckResult testCategories2() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            getRandomCredentials(4).forEach(main::execute);

            main.execute("back");
            List<String> lines = expect(main.execute("list")).toContain().lines();
            List<String> ids = parseIds(lines);

            main.execute("add points");
            main.execute(String.format("%s 10 10 10 10", ids.get(0)));
            main.execute(String.format("%s 5 5 5 5", ids.get(1)));
            main.execute(String.format("%s 5 5 5 5", ids.get(2)));
            main.execute(String.format("%s 2 2 2 2", ids.get(3)));

            main.execute("back");
            main.execute("statistics");

            List<String> linesJava = expect(main.execute("Java")).toContain(6).lines();
            List<String> linesDsa = expect(main.execute("DSA")).toContain(6).lines();
            List<String> linesDb = expect(main.execute("Databases")).toContain(6).lines();
            List<String> linesSpring = expect(main.execute("Spring")).toContain(6).lines();

            if (!linesJava.get(2).matches(".+\\s+10\\s+1\\.7\\s?%.*") ||
                    !linesJava.get(3).matches(".+\\s+5\\s+0\\.8\\s?%.*") ||
                    !linesJava.get(4).matches(".+\\s+5\\s+0\\.8\\s?%.*") ||
                    !linesJava.get(5).matches(".+\\s+2\\s+0\\.3\\s?%.*") ||
                    !linesJava.get(2).startsWith(ids.get(0)) ||
                    !linesJava.get(3).startsWith(ids.get(1)) && !linesJava.get(3).startsWith(ids.get(2)) ||
                    !linesJava.get(4).startsWith(ids.get(1)) && !linesJava.get(4).startsWith(ids.get(2)) ||
                    !linesJava.get(5).startsWith(ids.get(3)) ||
                    linesJava.get(3).startsWith(ids.get(1)) && ids.get(1).compareTo(ids.get(2)) >= 0 ||
                    linesJava.get(3).startsWith(ids.get(2)) && ids.get(2).compareTo(ids.get(1)) >= 0) {
                return CheckResult.wrong("Your Java student list either contains incorrect data or is incorrectly sorted");
            }

            if (!linesDsa.get(2).matches(".+\\s+10\\s+2\\.5\\s?%.*") ||
                    !linesDsa.get(3).matches(".+\\s+5\\s+1\\.3\\s?%.*") ||
                    !linesDsa.get(4).matches(".+\\s+5\\s+1\\.3\\s?%.*") ||
                    !linesDsa.get(5).matches(".+\\s+2\\s+0\\.5\\s?%.*") ||
                    !linesDsa.get(2).startsWith(ids.get(0)) ||
                    !linesDsa.get(3).startsWith(ids.get(1)) && !linesDsa.get(3).startsWith(ids.get(2)) ||
                    !linesDsa.get(4).startsWith(ids.get(1)) && !linesDsa.get(4).startsWith(ids.get(2)) ||
                    !linesDsa.get(5).startsWith(ids.get(3)) ||
                    linesDsa.get(3).startsWith(ids.get(1)) && ids.get(1).compareTo(ids.get(2)) >= 0 ||
                    linesDsa.get(3).startsWith(ids.get(2)) && ids.get(2).compareTo(ids.get(1)) >= 0) {
                return CheckResult.wrong("Your DSA student list either contains incorrect data or is incorrectly sorted");
            }

            if (!linesDb.get(2).matches(".+\\s+10\\s+2\\.1\\s?%.*") ||
                    !linesDb.get(3).matches(".+\\s+5\\s+1\\.0\\s?%.*") ||
                    !linesDb.get(4).matches(".+\\s+5\\s+1\\.0\\s?%.*") ||
                    !linesDb.get(5).matches(".+\\s+2\\s+0\\.4\\s?%.*") ||
                    !linesDb.get(2).startsWith(ids.get(0)) ||
                    !linesDb.get(3).startsWith(ids.get(1)) && !linesDb.get(3).startsWith(ids.get(2)) ||
                    !linesDb.get(4).startsWith(ids.get(1)) && !linesDb.get(4).startsWith(ids.get(2)) ||
                    !linesDb.get(5).startsWith(ids.get(3)) ||
                    linesDb.get(3).startsWith(ids.get(1)) && ids.get(1).compareTo(ids.get(2)) >= 0 ||
                    linesDb.get(3).startsWith(ids.get(2)) && ids.get(2).compareTo(ids.get(1)) >= 0) {
                return CheckResult.wrong("Your Databases student list either contains incorrect data " +
                        "or is incorrectly sorted");
            }

            if (!linesSpring.get(2).matches(".+\\s+10\\s+1\\.8\\s?%.*") ||
                    !linesSpring.get(3).matches(".+\\s+5\\s+0\\.9\\s?%.*") ||
                    !linesSpring.get(4).matches(".+\\s+5\\s+0\\.9\\s?%.*") ||
                    !linesSpring.get(5).matches(".+\\s+2\\s+0\\.4\\s?%.*") ||
                    !linesSpring.get(2).startsWith(ids.get(0)) ||
                    !linesSpring.get(3).startsWith(ids.get(1)) && !linesSpring.get(3).startsWith(ids.get(2)) ||
                    !linesSpring.get(4).startsWith(ids.get(1)) && !linesSpring.get(4).startsWith(ids.get(2)) ||
                    !linesSpring.get(5).startsWith(ids.get(3)) ||
                    linesSpring.get(3).startsWith(ids.get(1)) && ids.get(1).compareTo(ids.get(2)) >= 0 ||
                    linesSpring.get(3).startsWith(ids.get(2)) && ids.get(2).compareTo(ids.get(1)) >= 0) {
                return CheckResult.wrong("Your Spring student list either contains incorrect data " +
                        "or is incorrectly sorted");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 21)
        CheckResult testCategories3() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            main.execute("John Doe johnd@email.net");
            main.execute("Jane Spark jspark@yahoo.com");
            main.execute("back");

            List<String> lines = expect(main.execute("list")).toContain().lines();
            List<String> ids = parseIds(lines);

            main.execute("add points");
            main.execute(String.format("%s 8 7 7 5", ids.get(0)));
            main.execute(String.format("%s 7 6 9 7", ids.get(0)));
            main.execute(String.format("%s 6 5 5 0", ids.get(0)));
            main.execute(String.format("%s 8 0 8 6", ids.get(1)));
            main.execute(String.format("%s 7 0 0 0", ids.get(1)));
            main.execute(String.format("%s 9 0 0 5", ids.get(1)));

            main.execute("back");
            main.execute("statistics");

            List<String> linesJava = expect(main.execute("Java")).toContain(4).lines();
            List<String> linesDsa = expect(main.execute("DSA")).toContain(3).lines();
            List<String> linesDb = expect(main.execute("Databases")).toContain(4).lines();
            List<String> linesSpring = expect(main.execute("Spring")).toContain(4).lines();

            if (!linesJava.get(2).matches(".+\\s+24\\s+4\\.0\\s?%.*") ||
                    !linesJava.get(3).matches(".+\\s+21\\s+3\\.5\\s?%.*") ||
                    !linesJava.get(2).startsWith(ids.get(1)) || !linesJava.get(3).startsWith(ids.get(0))) {
                return CheckResult.wrong("Your Java student list either contains incorrect data or is incorrectly sorted");
            }

            if (!linesDsa.get(2).matches(".+\\s+18\\s+4\\.5\\s?%.*") || !linesDsa.get(2).startsWith(ids.get(0))) {
                return CheckResult.wrong("Your DSA student list either contains incorrect data or is incorrectly sorted");
            }

            if (!linesDb.get(2).matches(".+\\s+21\\s+4\\.4\\s?%.*") ||
                    !linesDb.get(3).matches(".+\\s+8\\s+1\\.7\\s?%.*") ||
                    !linesDb.get(2).startsWith(ids.get(0)) || !linesDb.get(3).startsWith(ids.get(1))) {
                return CheckResult.wrong("Your Databases student list either contains incorrect data " +
                        "or is incorrectly sorted");
            }

            if (!linesSpring.get(2).matches(".+\\s+12\\s+2\\.2\\s?%.*") ||
                    !linesSpring.get(3).matches(".+\\s+11\\s+2\\.0\\s?%.*") ||
                    !linesSpring.get(2).startsWith(ids.get(0)) || !linesSpring.get(3).startsWith(ids.get(1))) {
                return CheckResult.wrong("Your Spring student list either contains incorrect data " +
                        "or is incorrectly sorted");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 22)
        CheckResult testNotification1() {
            TestedProgram main = new TestedProgram();
            main.start();

            List<String> output = expect(main.execute("notify")).toContain(1).lines();
            if (output.stream()
                    .map(String::toLowerCase)
                    .allMatch(str -> anyMissingKeywords(str, "total", "0", "notified"))) {
                return CheckResult.wrong("Expected output was \"Total 0 students have been notified.\", " +
                        "but your output was: " + String.join("\n", output));
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 23)
        CheckResult testNotification2() {
            TestedProgram main = new TestedProgram();
            main.start();

            main.execute("add students");
            main.execute("John Doe johnd@email.net");
            main.execute("Jane Spark jspark@yahoo.com");
            main.execute("back");

            List<String> lines = expect(main.execute("list")).toContain().lines();
            List<String> ids = parseIds(lines);

            main.execute("add points");
            main.execute(String.format("%s 600 400 0 0", ids.get(0)));
            main.execute("back");

            List<String> output = expect(main.execute("notify")).toContain(7).lines();

            if (!output.get(0).toLowerCase().startsWith("to:") ||
                    !output.get(0).toLowerCase().contains("johnd@email.net") ||
                    !output.get(1).toLowerCase().startsWith("re:") ||
                    anyMissingKeywords(output.get(1), "learning", "progress") ||
                    anyMissingKeywords(output.get(2), "john", "doe", "accomplished") ||
                    !output.get(2).toLowerCase().contains("java") && !output.get(5).toLowerCase().contains("java")) {
                return CheckResult.wrong("You program should have printed the following:\nTo: johnd@email.net\n" +
                        "Re: Your Learning Progress\nHello, John Doe! You have accomplished our Java course!\n" +
                        "but your output was: \n" + output.stream().limit(3).collect(Collectors.joining("\n")));
            }

            if (!output.get(3).toLowerCase().startsWith("to:") ||
                    !output.get(3).toLowerCase().contains("johnd@email.net") ||
                    !output.get(4).toLowerCase().startsWith("re:") ||
                    anyMissingKeywords(output.get(4), "learning", "progress") ||
                    anyMissingKeywords(output.get(5), "john", "doe", "accomplished", "course") ||
                    !output.get(5).toLowerCase().contains("dsa") && !output.get(2).toLowerCase().contains("dsa")) {
                return CheckResult.wrong("You program should have printed the following:\nTo: johnd@email.net\n" +
                        "Re: Your Learning Progress\nHello, John Doe! You have accomplished our DSA course!\n" +
                        "but your output was: \n" + output.stream().limit(3).collect(Collectors.joining("\n")));
            }

            if (anyMissingKeywords(output.get(6).toLowerCase(), "total", "1", "notified")) {
                return CheckResult.wrong("Expected output was \"Total 1 student has been notified.\", but your output was: \n" +
                        String.join("\n", output));
            }

            if (output.stream().map(String::toLowerCase).anyMatch(str ->
                    str.contains("jane") || str.contains("spark") || str.contains("jspark@yahoo.com"))) {
                return CheckResult.wrong("Your notification should not mention Jane Spark");
            }

            output = expect(main.execute("notify")).toContain(1).lines();
            if (output.stream()
                    .map(String::toLowerCase)
                    .allMatch(str -> anyMissingKeywords(str, "total", "0", "notified"))) {
                return CheckResult.wrong("Expected output was \"Total 0 students have been notified\", " +
                        "but your output was: " + String.join("\n", output));
            }

            return CheckResult.correct();
        }

        private boolean anyMissingKeywords(String output, String... keywords) {
            List<String> tokens = Arrays.asList(
                    output.trim().toLowerCase().split("\\W+")
            );

            return !tokens.containsAll(Arrays.stream(keywords)
                    .map(String::toLowerCase)
                    .collect(Collectors.toList()));
        }

        private boolean incorrectString(String output, String model) {
            String normalizedOutput = output.replaceAll("\\W+", "").toLowerCase();
            String normalizedModel = model.replaceAll("\\W+", "").toLowerCase();

            return !normalizedOutput.contains(normalizedModel);
        }

        private String[] getBlankInput() {
            return new String[]{"", "  ", "\t", " \t"};
        }

        private String[] getUnknownCommands() {
            return new String[]{"abc", "quit", "  brexit ", "exi  t", "?", "break",
                    "-exit", "Ctrl+C", "exit please", ":q", "java", "spring", "dsa", "databases"};
        }

        private String[] getCorrectCredentials() {
            return new String[]{"John Smith jsmith@hotmail.com", "Anny Doolittle anny.md@mail.edu",
                    "Jean-Claude O'Connor jcda123@google.net", "Mary Emelianenko 125367at@zzz90.z9",
                    "Al Owen u15da125@a1s2f4f7.a1c2c5s4", "Robert Jemison Van de Graaff robertvdgraaff@mit.edu",
                    "Ed Eden a1@a1.a1", "na'me s-u ii@ii.ii", "n'a me su aa-b'b ab@ab.ab", "nA me 1@1.1"};
        }

        private String[][] getIncorrectCredentials() {
            return new String[][]{
                    {"", "Incorrect credentials"}, {" \t", "Incorrect credentials."},
                    {"name surname", "Incorrect credentials."},
                    {"n surname email@email.xyz", "Incorrect first name."},
                    {"'name surname email@email.xyz", "Incorrect first name."},
                    {"-name surname email@email.xyz", "Incorrect first name."},
                    {"name- surname email@email.xyz", "Incorrect first name."},
                    {"name' surname email@email.xyz", "Incorrect first name."},
                    {"nam-'e surname email@email.xyz", "Incorrect first name."},
                    {"na'-me surname email@email.xyz", "Incorrect first name."},
                    {"na--me surname email@email.xyz", "Incorrect first name."},
                    {"na''me surname email@email.xyz", "Incorrect first name."},
                    {"námé surname email@email.xyz", "Incorrect first name."},
                    {"name s email@email.xyz", "Incorrect last name."},
                    {"name -surname email@email.xyz", "Incorrect last name."},
                    {"name 'surname email@email.xyz", "Incorrect last name."},
                    {"name surnam''e email@email.xyz", "Incorrect last name."},
                    {"name surn--ame email@email.xyz", "Incorrect last name."},
                    {"name s'-urname email@email.xyz", "Incorrect last name."},
                    {"name su-'rname email@email.xyz", "Incorrect last name."},
                    {"name surname- email@email.xyz", "Incorrect last name."},
                    {"name surname' email@email.xyz", "Incorrect last name."},
                    {"name surnámé email@email.xyz", "Incorrect last name."},
                    {"name surname emailemail.xyz", "Incorrect email."},
                    {"name surname email@emailxyz", "Incorrect email."},
                    {"name surname email@e@mail.xyz", "Incorrect email."},
            };
        }

        private String[] getIncorrectPoints() {
            return new String[]{"", "-1 1 1 1", "1 1 2 A", "1 1 1", "1 1 1 1 1"};
        }

        private String[] getCorrectPoints(int n) {
            return Stream.generate(String::new)
                    .limit(n)
                    .map(it -> String.format("%d %d %d %d", nextPoint(), nextPoint(), nextPoint(), nextPoint()))
                    .toArray(String[]::new);
        }

        private int nextPoint() {
            return rnd.nextInt(10) + 1;
        }

        private List<String> parseIds(List<String> lines) {
            try {
                return lines.stream()
                        .skip(1)
                        .map(String::trim)
                        .collect(Collectors.toList());
            } catch (Exception e) {
                throw new WrongAnswer("Error occurred while parsing your output " + e.getMessage());
            }
        }

        private List<String> generateNames(int n) {
            List<String> names = List.of("Shoshana Utica", "Marisa Firman", "Gwenette Anagnos", "Charlena Girardo",
                    "Alexina Belcher", "Karee Antoinetta", "Dolley Panther", "Elysha Quinlan", "Trixie Winer",
                    "Ricki Trovillion", "Amye Uriisa", "Hedwig Wally", "Gwenette Kironde", "Jermaine Naaman",
                    "Olga Rosanne", "Annecorinne Ause", "Aurie Dorisa", "Van Fawnia", "Carmella Campman",
                    "Francesca Francis", "Elwira Florrie", "Nonna Miko", "Natka Herculie", "Roxi Hett", "Brandise Hardan",
                    "Toby Bleier", "Dalia Gleeson", "Emelia Annnora", "Beatrisa Jegar", "Barbara-Anne Chicky",
                    "Ann Agnella", "Lebbie Alabaster", "Leola Whelan", "Starlin Griz", "Anjanette Uis", "Tasha Chem");

            List<String> selectedNames = new ArrayList<>(names);
            Collections.shuffle(selectedNames);
            return selectedNames.stream().limit(n).collect(Collectors.toList());
        }

        private List<String> generateEmails(int n) {
            return IntStream.rangeClosed(1, n).mapToObj(it -> "address" + it + "@mail.com").collect(Collectors.toList());
        }

        private List<String> getRandomCredentials(int n) {
            List<String> names = generateNames(n);
            List<String> emails = generateEmails(n);
            return IntStream.range(0, n)
                    .mapToObj(it -> String.format("%s %s", names.get(it), emails.get(it)))
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
- name: test/tracker/ValidatorTest.java
  visible: true
  text: |-
    package tracker;

    import org.junit.jupiter.api.DisplayName;
    import org.junit.jupiter.params.ParameterizedTest;
    import org.junit.jupiter.params.provider.Arguments;
    import org.junit.jupiter.params.provider.CsvSource;
    import org.junit.jupiter.params.provider.MethodSource;
    import org.junit.jupiter.params.provider.ValueSource;
    import static org.junit.jupiter.params.provider.Arguments.arguments;

    import java.util.List;

    import static org.junit.jupiter.api.Assertions.*;

    class ValidatorTest {

        @ParameterizedTest
        @ValueSource(strings = {"John", "Foe", "Doe", "Chow", "O'Clark", "P'e-ter"})
        void isValidFirstName(String name) {
            assertTrue(Validator.isValidFirstName(name));
        }

        @DisplayName("Valid lastNames")
        @ParameterizedTest
        @MethodSource("namesFactory")
        void isValidLastName(String lastNames) {
            assertTrue(Validator.isValidLastName(lastNames));
        }

        @ParameterizedTest
        @MethodSource("argMailFactory")
        void isValidEmail(String email, boolean result) {
            assertEquals(result, Validator.isValidEmail(email));
        }


        @ParameterizedTest(name = "{index} => isAllValidCredentialsOf({0}, {1}, {2}) == {3}")
        @CsvSource({"John, Doe, johnDoe@gmail.com, true", "Bob, feynman, bobFeynman@outlook.com, true"})
        void isValidAllCredentials(String firstName, String lastName, String email, boolean expected) {
            assertEquals(expected, Validator.isValidAllCredentials(firstName, lastName, email));
        }

        static List<String> namesFactory() {
            return List.of("pa'rker", "zu-ker-burg", "b'om-b", "sus", "fist", "resist");
        }

        static List<Arguments> argMailFactory() {
            return List.of(arguments("ajmk47@vix.com", true), arguments("ajmk29@@..com", false));
        }
    }
  learner_created: false
- name: src/tracker/Application.java
  visible: true
  text: |
    package tracker;

    import java.util.Random;
    import java.util.Scanner;

    class Application {
        private static final Random random = new Random(1000L);
        private static final String ADD_STUDENT_PROMPT = "Enter student credentials or 'back' to return:";
        private static final String ADD_POINTS_PROMPT = "Enter an id and points to add or 'back' to return:";
        private static final String FAREWELL = "Bye!";
        private static final String INCORRECT_CREDENTIALS_PROMPT = "Incorrect credentials.";
        private static final String STARTUP = "Learning Progress Tracker";
        private static final String STUDENT_ADDED_PROMPT = "The student has been added.";

        public void run() {
            Scanner scanner = new Scanner(System.in);
            System.out.println(STARTUP);
            while (scanner.hasNextLine()) {
                String input = scanner.nextLine();
                if (input.equals(Operation.EXIT.command)) {
                    System.out.println(FAREWELL);
                    break;
                } else if (input.equals(Operation.BACK.command)) {
                    System.out.println("Enter 'exit' to exit the program");
                } else if (input.equals(Operation.ADD_STUDENT.command)) {
                    addStudents();
                }  else if (input.equals(Operation.LIST.command)) {
                    DatabaseStudents.listStudentsIds();
                } else if (input.equals(Operation.ADD_POINTS.command)) {
                    addPoints();
                } else if (input.equals(Operation.FIND.command)) {
                    findStudent();
                } else if (input.equals(Operation.STATISTICS.command)) {
                    statistics();
                } else if (input.isBlank()) {
                    System.out.println("No input");
                } else {
                    System.out.println("Unknown command!");
                }
            }
        }

        void addStudents() {
            Scanner scanner = new Scanner(System.in);
            int addedStudents = 0;
            System.out.println(ADD_STUDENT_PROMPT);
            while(scanner.hasNextLine()) {
                String cred = scanner.nextLine();
                if (cred.equals(Operation.BACK.command)) {
                    break;
                }
                String[] temp = cred.split(" ");
                if (temp.length < 3) {
                    System.out.println(INCORRECT_CREDENTIALS_PROMPT);
                    continue;
                }
                String[] credArr = getCredentials(cred);
                if (Validator.isValidAllCredentials(credArr[0], credArr[1], credArr[2])
                        && !DatabaseStudents.emailExistInDB(credArr[2])) {
                    DatabaseStudents.addStudent(String.valueOf(Math.abs(random.nextInt()) % 999999),
                            new Student(credArr[0], credArr[1], credArr[2], new Points()));
                    addedStudents++;
                    System.out.println(STUDENT_ADDED_PROMPT);
                } else {
                    Validator.printErrorMessage(credArr[0], credArr[1], credArr[2]);
                }
            }
            System.out.println("Total " + addedStudents + " students have been added.");
        }

        public String[] getCredentials(String prompt) {
            String[] credentialsArr = prompt.split("\\s+");
            StringBuilder lstName = new StringBuilder();
            for (int i = 1; i < credentialsArr.length - 1; i++) {
                lstName.append(credentialsArr[i]).append(" ");
            }
            return new String[]{credentialsArr[0], lstName.toString(), credentialsArr[credentialsArr.length - 1]};
        }

        void addPoints() {
            StudentActivity.addPoints();
        }

        void findStudent() {
            System.out.println("Enter an id or 'back' to return");
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNextLine()) {
                String id = scanner.nextLine();
                if (id.equals(Operation.BACK.command)) {
                    break;
                }
                if (DatabaseStudents.exists(id)) {
                    System.out.println(id + " " + DatabaseStudents.getStudent(id).getScore());
                } else {
                    System.out.println("No student is found for id=" + id);
                }
            }
        }

        void statistics() {
            System.out.println("Type the name of a course to see details or 'back' to quit");
            getStatistics();
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNextLine()) {
                String course = scanner.nextLine();
                if (course.equals(Operation.BACK.command)) {
                    break;
                }
                if (course.equalsIgnoreCase("java")
                    || course.equalsIgnoreCase("dsa")
                    || course.equalsIgnoreCase("databases")
                    || course.equalsIgnoreCase("spring")) {
                    DatabaseStudents.getCourseDetails(course);
                } else {
                    System.out.println("Unknown course");
                }
            }
        }

        void getStatistics() {
            if (DatabaseStudents.getStudents().size() > 0) {
                DatabaseStudents.getMostAndLeastPopularCourse();
                StudentActivity.getCourseActivity();
                DatabaseStudents.getEasiestAndHardestCourses();
            } else {
                System.out.println("Most popular: n/a");
                System.out.println("Least popular: n/a");
                System.out.println("Highest activity: n/a");
                System.out.println("Lowest activity: n/a");
                System.out.println("Easiest course: n/a");
                System.out.println("Hardest course: n/a");
            }
        }
    }
  learner_created: true
- name: src/tracker/Validator.java
  visible: true
  text: |
    package tracker;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Validator {

        private static final String INCORRECT_FIRST_NAME_PROMPT = "Incorrect first name.";
        private static final String INCORRECT_LAST_NAME_PROMPT = "Incorrect last name.";
        private static final String INCORRECT_EMAIL_PROMPT = "Incorrect email.";
        private static final String EMAIL_ALREADY_TAKEN_PROMPT = "This email is already taken.";

        private static final Pattern correctFirstName = Pattern.compile("[a-zA-Z]+(['-]?[a-zA-Z]\\s?)+");
        private static final Pattern correctLastName = Pattern.compile("[a-zA-Z]+(['-]?[a-zA-Z]\\s?)+");
        private static final Pattern correctEmail = Pattern.compile("^[\\w.]+@[\\w.]+\\.[\\w]+$");
        private static final Pattern correctPoints = Pattern.compile("^([\\w]+\\s){1}([\\d]+\\s+){3}[\\d]+$");

        public static boolean isValidPointsFormat(String points) {
            Matcher matcher = correctPoints.matcher(points);
            return matcher.matches();
        }
        public static boolean isValidAllCredentials(String firstName, String lastName, String email) {
            return isValidFirstName(firstName) && isValidLastName(lastName) && isValidEmail(email);
        }

        public static void printErrorMessage(String firstName, String lastName, String email) {
            if (!isValidFirstName(firstName)) {
                System.out.println(INCORRECT_FIRST_NAME_PROMPT);
            }
            if (!isValidLastName(lastName)) {
                System.out.println(INCORRECT_LAST_NAME_PROMPT);
            }
            if (!isValidEmail(email)) {
                System.out.println(INCORRECT_EMAIL_PROMPT);
            }
            if (DatabaseStudents.emailExistInDB(email)) {
                System.out.println(EMAIL_ALREADY_TAKEN_PROMPT);
            }
        }

        public static boolean isValidFirstName(String firstName) {
            Matcher matcher = correctFirstName.matcher(firstName);
            return matcher.matches();
        }

        public static boolean isValidLastName(String lastName) {
            Matcher matcher = correctLastName.matcher(lastName);
            return matcher.matches();
        }

        public static boolean isValidEmail(String email) {
            Matcher matcher = correctEmail.matcher(email);
            return matcher.matches();
        }
    }
  learner_created: true
- name: src/tracker/Student.java
  visible: true
  text: |
    package tracker;

    public class Student {
        private String firstName;
        private String lastName;
        private String email;
        private Points points;

        public Student(String firstName, String lastName, String email, Points points) {
                this.firstName = firstName;
                this.lastName = lastName;
                this.email = email;
                this.points = points;
        }

        public void updatePoints(int javaPoints, int dsaPoints, int databasesPoints, int springPoints) {
            points.updatePoints(javaPoints, dsaPoints, databasesPoints, springPoints);
        }

        public int[] getCourses() {
            return points.getEnrolledCourse();
        }

        public String getScore() {
            return points.getScore();
        }
        public String getEmail() {
            return email;
        }

        public Points getPoints() {
            return points;
        }
    }
  learner_created: true
- name: src/tracker/Points.java
  visible: true
  text: |
    package tracker;

    public class Points {
        public static final double javaPassingScore = 600;
        public static final double dsaPassingScore = 400;
        public static final double databasesPassingScore = 480;
        public static final double springPassingScore = 550;
        private int javaPoints;
        private int dsaPoints;
        private int databasesPoints;
        private int springPoints;

        public Points() {
            this.javaPoints = 0;
            this.dsaPoints = 0;
            this.databasesPoints = 0;
            this.springPoints = 0;
        }

        public int getJavaPoints() {
            return javaPoints;
        }

        public int getDsaPoints() {
            return dsaPoints;
        }

        public int getDatabasesPoints() {
            return databasesPoints;
        }

        public int getSpringPoints() {
            return springPoints;
        }

        public void updatePoints(int javaPoints, int dsaPoints, int databasesPoints, int springPoints) {
            this.javaPoints += javaPoints;
            this.dsaPoints += dsaPoints;
            this.databasesPoints += databasesPoints;
            this.springPoints += springPoints;
        }

        public int[] getEnrolledCourse() {
            // if points are greater than 0, then the student is enrolled in the course
            int[] enrolledCourses = new int[4];
            enrolledCourses[0] = javaPoints > 0 ? 1 : 0;
            enrolledCourses[1] = dsaPoints > 0 ? 1 : 0;
            enrolledCourses[2] = databasesPoints > 0 ? 1 : 0;
            enrolledCourses[3] = springPoints > 0 ? 1 : 0;
            return enrolledCourses;
        }

        public int[] getActivity() {
            return new int[] {javaPoints, dsaPoints, databasesPoints, springPoints};
        }

        public String getScore() {
             return String.format("points: Java=%d; DSA=%d; Databases=%d; Spring=%d%n",
                    javaPoints, dsaPoints, databasesPoints, springPoints);
        }
    }
  learner_created: true
- name: src/tracker/DatabaseStudents.java
  visible: true
  text: |
    package tracker;

    import java.math.RoundingMode;
    import java.util.*;

    public class DatabaseStudents {
        private static Map<String, Student> students = new LinkedHashMap<>();

        public static Map<String, Student> getStudents() {
            return students;
        }

        static void addStudent(String id, Student student) {
            students.put(id, student);
        }

        static boolean exists(String id) {
            return students.containsKey(id);
        }

        static Student getStudent(String id) {
            return students.get(id);
        }

        static void listStudentsIds() {
            if (students.isEmpty()) {
                System.out.println("No students found");
            } else {
                System.out.println("Students:");
                for (Map.Entry<String, Student> entry : students.entrySet()) {
                    System.out.println(entry.getKey());
                }
            }
        }

        static boolean emailExistInDB(String email) {
            for (Student student : students.values()) {
                if (student.getEmail().equals(email)) {
                    return true;
                }
            }
            return false;
        }

        static void getMostAndLeastPopularCourse() {
            String[] courses = {"Java", "DSA", "Databases", "Spring"};
            int[] enrolledStudents = new int[4];
            for (Student student : students.values()) {
                int[] enrolledCourses = student.getPoints().getEnrolledCourse();
                for (int i = 0; i < enrolledCourses.length; i++) {
                    enrolledStudents[i] += enrolledCourses[i];
                }
            }
            int max = Integer.MIN_VALUE;
            int min = Integer.MAX_VALUE;
            for (int total : enrolledStudents) {
                if (total > max) {
                    max = total;
                }
                if (total < min) {
                    min = total;
                }
            }
            List<String> mostPopularCourses = new ArrayList<>();
            List<String> leastPopularCourses = new ArrayList<>();
            for (int i = 0; i < enrolledStudents.length; i++) {
                if (enrolledStudents[i] == max) {
                    mostPopularCourses.add(courses[i]);
                }
                if (enrolledStudents[i] == min) {
                    leastPopularCourses.add(courses[i]);
                }
            }
            for (String course : mostPopularCourses) {
                leastPopularCourses.remove(course);
            }
            System.out.println("Most popular: " + (!mostPopularCourses.isEmpty() ?
                                String.join(", ", mostPopularCourses) : "n/a"));
            System.out.println("Least popular: " + (!leastPopularCourses.isEmpty() ?
                                String.join(", ", leastPopularCourses) : "n/a"));
        }

        static void getEasiestAndHardestCourses() {
            String[] courses = {"Java", "DSA", "Databases", "Spring"};
            int[] points = new int[4];
            int[] numAssignments = new int[4];
            for (Student student : students.values()) {
                int[] studentsPoints = student.getPoints().getActivity();
                for (int i = 0; i < studentsPoints.length; i++) {
                    if (studentsPoints[i] > 0) {
                        points[i] += studentsPoints[i];
                        numAssignments[i]++;
                    }
                }
            }
            double[] averageGradePerAssignment = new double[4];
            for (int i = 0; i < averageGradePerAssignment.length; i++) {
                averageGradePerAssignment[i] = (double) points[i] / numAssignments[i];
            }
            double max = Double.MIN_VALUE;
            double min = Double.MAX_VALUE;
            for (double average : averageGradePerAssignment) {
                if (average > max) {
                    max = average;
                }
                if (average < min) {
                    min = average;
                }
            }
            List<String> easiestCourses = new ArrayList<>();
            List<String> hardestCourses = new ArrayList<>();
            for (int i = 0; i < averageGradePerAssignment.length; i++) {
                if (averageGradePerAssignment[i] == max) {
                    easiestCourses.add(courses[i]);
                }
                if (averageGradePerAssignment[i] == min) {
                    hardestCourses.add(courses[i]);
                }
            }
            System.out.println("Easiest course: " + String.join(", ", easiestCourses));
            System.out.println("Hardest course: " + String.join(", ", hardestCourses));
        }

        static void getCourseDetails(String course) {
            List<String> topStudents = new ArrayList<>();
            String id = "";
            int totalPoints = 0;
            double grade = 0;
            for (Map.Entry<String, Student> entry : students.entrySet()) {
                if (course.strip().equalsIgnoreCase("java")) {
                    id = entry.getKey();
                    totalPoints = entry.getValue().getPoints().getJavaPoints();
                    grade = totalPoints / Points.javaPassingScore * 100;
                } else if ("dsa".equalsIgnoreCase(course)) {
                    id = entry.getKey();
                    totalPoints = entry.getValue().getPoints().getDsaPoints();
                    grade = totalPoints / Points.dsaPassingScore * 100;
                } else if ("databases".equalsIgnoreCase(course)) {
                    id = entry.getKey();
                    totalPoints = entry.getValue().getPoints().getDatabasesPoints();
                    grade = totalPoints / Points.databasesPassingScore * 100;
                } else if ("spring".equalsIgnoreCase(course)) {
                    id = entry.getKey();
                    totalPoints = entry.getValue().getPoints().getSpringPoints();
                    grade = totalPoints / Points.springPassingScore * 100;
                }
                topStudents.add(id + " " + totalPoints + " " + grade);
            }
            System.out.println(course);
            System.out.println("id     points  completed");
            topStudents.stream()
                    .sorted((s1, s2) -> {
                        String[] s1Arr = s1.split(" ");
                        String[] s2Arr = s2.split(" ");
                        int s1Points = Integer.parseInt(s1Arr[1]);
                        int s2Points = Integer.parseInt(s2Arr[1]);
                        if (s1Points == s2Points) {
                            return s1Arr[0].compareTo(s2Arr[0]);
                        }
                        return s2Points - s1Points;
                    })
                    .filter(s -> Integer.parseInt(s.split(" ")[1]) > 0)
                    .forEach(s -> System.out.printf("%s %s      %.1f%%\n",
                            s.split(" ")[0], s.split(" ")[1],
                            Double.parseDouble(s.split(" ")[2])));
        }
    }
  learner_created: true
- name: src/tracker/StudentActivity.java
  visible: true
  text: |
    package tracker;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class StudentActivity {
        private static final String ADD_POINTS_PROMPT = "Enter an id and points to add or 'back' to return:";
        private static final String[] courses = {"Java", "DSA", "Databases", "Spring"};
        private static final int[] coursesActivity = new int[4];

        static void addPoints() {
            System.out.println(ADD_POINTS_PROMPT);
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNextLine()) {
                String input = scanner.nextLine();
                if (input.equals(Operation.BACK.command)) {
                    break;
                }
                if (!Validator.isValidPointsFormat(input)) {
                    System.out.println("Incorrect points format");
                    continue;
                }
                String[] temp = input.split(" ");
                String id = temp[0];
                if (DatabaseStudents.exists(id)) {
                    adjustActivity(temp);
                    DatabaseStudents.getStudent(id).updatePoints(Integer.parseInt(temp[1]), Integer.parseInt(temp[2]),
                            Integer.parseInt(temp[3]), Integer.parseInt(temp[4]));
                    System.out.println("Points updated");
                } else {
                    System.out.println("No student is found for id=" + id);
                }
            }
        }

        static void adjustActivity(String[] studentPoints) {
            for (int i = 0; i < coursesActivity.length; i++) {
                if (Integer.parseInt(studentPoints[i + 1]) > 0) {
                    coursesActivity[i]++;
                }
            }
        }

        static void getCourseActivity() {
            int max = Integer.MIN_VALUE;
            int min = Integer.MAX_VALUE;
            for (int total : coursesActivity) {
                if (total > max) {
                    max = total;
                }
                if (total < min) {
                    min = total;
                }
            }
            List<String> highestActivity = new ArrayList<>();
            List<String> leastActivity = new ArrayList<>();
            for (int i = 0; i < coursesActivity.length; i++) {
                if (coursesActivity[i] == max) {
                    highestActivity.add(courses[i]);
                }
                if (coursesActivity[i] == min) {
                    leastActivity.add(courses[i]);
                }
            }
            for (String course : highestActivity) {
                leastActivity.remove(course);
            }
            System.out.println("Most popular: " + (!highestActivity.isEmpty() ?
                    String.join(", ", highestActivity) : "n/a"));
            System.out.println("Least popular: " + (!leastActivity.isEmpty() ?
                    String.join(", ", leastActivity) : "n/a"));
        }
    }
  learner_created: true
- name: src/tracker/Operation.java
  visible: true
  text: |
    package tracker;

    public enum Operation {

        ADD_STUDENT("add students"),
        ADD_POINTS("add points"),
        STATISTICS("statistics"),
        BACK("back"),
        FIND("find"),
        LIST("list"),
        EXIT("exit");

        public final String command;

        Operation(String command) {
            this.command = command;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/14400#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 07 Sep 2022 08:12:53 UTC
record: 5
